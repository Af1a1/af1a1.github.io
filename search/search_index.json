{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Visual Quiz Builder \u00b6 This app is built to help you connect with your customers in an engaging way to help them find the right products and build loyalty to your brand. The quiz setup is split into two phases - quiz building and quiz settings. Start by creating your quiz\u2019s questions and answers. Then link products to the different quiz pathways. Next, you can style your quiz to match your unique store\u2019s look and feel using different background colors, fonts, and imagery. How it works \u00b6 With the easy-to-use quiz builder, add questions and options to your quiz. Make as many edits as you like, and preview your quiz, before you publish it to your audience. Edit the look and feel of the quiz by changing colors, fonts, or adding images. You can create a quiz that recommends products, collections, or variants (SKUs) to give you ultimate control over the recommendation. When you\u2019re ready to make your quiz live, simply publish it and use your custom link to make your quiz appear wherever you want! Most valuable features \u00b6 We know you want simple solutions that work for your store. That\u2019s why we\u2019ve heard your feedback and are offering the following features, with much more to come! Super easy quiz builder - quickly add/edit/delete questions and options Lead Generation - capture your visitors\u2019 email address and other key information in order to nurture a strong relationship Email Integration - Shopify, Klaviyo, Omnisend, Others Simple, elegant design - we get out of the way to let your content and brand take center stage. Add a background image, select text/button colors, customize the font, or even add custom CSS! Control over quiz display and placement - Link to your quiz from anywhere, and choose to display it as full screen, embedded or popup Image Options - you can show text options, image options, or a combo! Single - or Multi-Select Options - when choosing just one answer just won\u2019t cut it Branching Logic Jumps - so you can create custom and personalized quiz flows based on user responses Multiple Quizzes Powerful Analytics - actionable and human-friendly insights Contact us for any custom feature or design request. Integrates with \u00b6 Klaviyo, Omnisend, Returnly, Google Analytics, Facebook Pixel, Privy","title":"Welcome to Visual Quiz Builder"},{"location":"#welcome-to-visual-quiz-builder","text":"This app is built to help you connect with your customers in an engaging way to help them find the right products and build loyalty to your brand. The quiz setup is split into two phases - quiz building and quiz settings. Start by creating your quiz\u2019s questions and answers. Then link products to the different quiz pathways. Next, you can style your quiz to match your unique store\u2019s look and feel using different background colors, fonts, and imagery.","title":"Welcome to Visual Quiz Builder"},{"location":"#how-it-works","text":"With the easy-to-use quiz builder, add questions and options to your quiz. Make as many edits as you like, and preview your quiz, before you publish it to your audience. Edit the look and feel of the quiz by changing colors, fonts, or adding images. You can create a quiz that recommends products, collections, or variants (SKUs) to give you ultimate control over the recommendation. When you\u2019re ready to make your quiz live, simply publish it and use your custom link to make your quiz appear wherever you want!","title":"How it works"},{"location":"#most-valuable-features","text":"We know you want simple solutions that work for your store. That\u2019s why we\u2019ve heard your feedback and are offering the following features, with much more to come! Super easy quiz builder - quickly add/edit/delete questions and options Lead Generation - capture your visitors\u2019 email address and other key information in order to nurture a strong relationship Email Integration - Shopify, Klaviyo, Omnisend, Others Simple, elegant design - we get out of the way to let your content and brand take center stage. Add a background image, select text/button colors, customize the font, or even add custom CSS! Control over quiz display and placement - Link to your quiz from anywhere, and choose to display it as full screen, embedded or popup Image Options - you can show text options, image options, or a combo! Single - or Multi-Select Options - when choosing just one answer just won\u2019t cut it Branching Logic Jumps - so you can create custom and personalized quiz flows based on user responses Multiple Quizzes Powerful Analytics - actionable and human-friendly insights Contact us for any custom feature or design request.","title":"Most valuable features"},{"location":"#integrates-with","text":"Klaviyo, Omnisend, Returnly, Google Analytics, Facebook Pixel, Privy","title":"Integrates with"},{"location":"installation/1.getting_started/","text":"Add Visual Quiz Builder to Your Shopify Store \u00b6 Our installation process is very straight forwawrd. \u00b6","title":"Add Visual Quiz Builder to Your Shopify Store"},{"location":"installation/1.getting_started/#add-visual-quiz-builder-to-your-shopify-store","text":"","title":"Add Visual Quiz Builder to Your Shopify Store"},{"location":"installation/1.getting_started/#our-installation-process-is-very-straight-forwawrd","text":"","title":"Our installation process is very straight forwawrd."},{"location":"installation/2.first_quiz/","text":"Your First Quiz \u00b6","title":"Your First Quiz"},{"location":"installation/2.first_quiz/#your-first-quiz","text":"","title":"Your First Quiz"},{"location":"personalize/custom_recommendations/","text":"Setting up Custom Recommendations page with Shopify \u00b6 The process starts with creating a page template in Shopify Theme editor then creating a page with that template. The template code would have a javascript code that's responsible for processing the data from the quiz, that data includes recommended products and would contain user information (Email, Name) if available. Creating Shopify Page Template \u00b6 To access the editor page you need to follow these steps: Access your store dashboard From the dashboard sidebar click on Online Store In live theme section press on Actions > Edit Code From the Editor sidebar and under Templates section, press on Add a new template From the creation modal chose the template type as Page and enter any name you like for the template and press on Create Template The liquid code like any html code is consisted of three parts: (HTML, CSS, JS), we're gonna add them one by one Add the parent element that will contain the products, the most easy way is by looking in the page for a line that reads {{ page.content }} and paste this block of code beneath it: < div id = \"products\" ></ div > The code should look something like this: Now we would need to add the javascript code for fetching the products, at the end of the page copy and paste the following block of code: < script > // Parsing the url paramaters and data and store them in global variable \"params\" var params = window . location . search . substr ( 1 ). split ( '&' ). reduce ( function ( q , query ) { var chunks = query . split ( '=' ) var key = chunks [ 0 ] var value = chunks [ 1 ] return ( q [ key ] = value , q ) }, {}) // Storing product recommendations in another global variable var product_handles = ( params [ 'products' ] || \"\" ). split ( ',' ) // Calling Shopify api to retrieve the products data Promise . all ( product_handles . map ( function ( product ) { return new Promise ( function ( resolve , reject ) { fetch ( '/products/' + product + '.json' ) . then ( function ( result ) { // Making sure that the product actually exists if ( result . status !== 404 ) { return result . json () } else { return { product : null } } }) . then ( function ( data ) { resolve ( data . product ) }) . catch ( reject ) }) })) . then ( function ( products ) { // Filtering out the products list if it had any removed products products = products . filter ( function ( product ) { return !! product }) // The product grid template var product_template = function ( product , index ) { return ` <div class=\"product\" itemprop=\"itemListElement\" itemscope itemtype=\"http://schema.org/Product\"> <a href=\"/products/ ${ product . handle } \" itemprop=\"url\"> ${ product . images . length ? ` <div class=\"product_image\"> <img src=\" ${ product . images [ 0 ]. src } \" alt=\" ${ product . title } \" /> </div>` : \"\" } <div class=\"info\"> <span class=\"title\" itemprop=\"name\"> ${ product . title } </span> <span class=\"price\" itemprop=\"offers\" itemscope itemtype=\"http://schema.org/Offer\"> <meta itemprop=\"price\" content=\" ${ product . variants [ 0 ]. price } \" /> <meta itemprop=\"priceCurrency\" content=\"USD\" /> <link itemprop=\"availability\" href=\"http://schema.org/InStock\"> <span class=\"money\">$ ${ product . variants [ 0 ]. price } </span> </span> </div> </a> </div>` } // Fill the resulted products grid in the #products element document . getElementById ( \"products\" ). innerHTML = products . map ( product_template ). join ( '' ) }) < /script> At the end we would need some styling for the page, we have that covered through some basic styling you can edit yourself, copy the following block at the end of the page: <!-- { % style % } # products { display : flex ; flex-wrap : wrap ; flex-direction : row ; align-items : flex-end ; justify-content : center ; } . product { width : 24 % ; margin : 1 % ; display : flex ; position : relative ; align-items : center ; flex-direction : column ; justify-content : center ; } . product a { text-decoration : none ; } . product . info { text-align : center ; } { % endstyle % } ``` -- > 10 . Now it 's time to create the page, in Shopify Dashboard sidebar, press on **Pages** ![](../images/recommendations/step-10.png) 11. In pages press on **Add Page** ![](../images/recommendations/step-11.png) 12. Enter your desired page name and you don' t have to fill any content 13 . On the right in ** Online Store ** section you would fine the template select bar , select the recommendations template ![](../ images / recommendations / step-13 . png ) 14 . Save your page and copy its url ## Sync the recommendations page with your quiz 1 . In Visual Quiz Builder app , open your quiz ![](../ images / recommendations / step-15 . png ) 2 . In the dashboard , scroll down until you find ** Result page ** section and press on it ![](../ images / recommendations / step-16 . png ) 3 . In the right sidebar enable toggle button to enable custom recommendation page and find ** Custom Recommendations URL ** field and paste your page url in it . ![](../ images / recommendations / step-17-A . png ) 4 . Make sure you have tagged options in order for the recommendations page to work and save your quiz by pressing on ** Save & Publish ** ![](../ images / recommendations / step-18 . png ) ## Use user provided name in the page ( Optional ) If you are asking the user about their information like name or email then these data will be passed along sind recommendations to the recommendations page If you would like to use any of the user info you have to follow these steps : 1 . Add the following block of code in any desired area in your where you want to use the user name . ``` html < p > Hi < span id = \"user-name\" ></ span >, Here are your recommendations .</ p > Add the following block of code to the already existing javascript code. document . getElementById ( \"user-name\" ). innerHTML = params [ \"user_name\" ] Use user provided email in the page (Optional) \u00b6 Just like we're doing in the user name we can do the same thing with email, in different usually you would need to send the email in the third-party tool of your choosing. You can access the email simply by using the following line: params [ \"user_email\" ]","title":"Setting up Custom Recommendations page with Shopify"},{"location":"personalize/custom_recommendations/#setting-up-custom-recommendations-page-with-shopify","text":"The process starts with creating a page template in Shopify Theme editor then creating a page with that template. The template code would have a javascript code that's responsible for processing the data from the quiz, that data includes recommended products and would contain user information (Email, Name) if available.","title":"Setting up Custom Recommendations page with Shopify"},{"location":"personalize/custom_recommendations/#creating-shopify-page-template","text":"To access the editor page you need to follow these steps: Access your store dashboard From the dashboard sidebar click on Online Store In live theme section press on Actions > Edit Code From the Editor sidebar and under Templates section, press on Add a new template From the creation modal chose the template type as Page and enter any name you like for the template and press on Create Template The liquid code like any html code is consisted of three parts: (HTML, CSS, JS), we're gonna add them one by one Add the parent element that will contain the products, the most easy way is by looking in the page for a line that reads {{ page.content }} and paste this block of code beneath it: < div id = \"products\" ></ div > The code should look something like this: Now we would need to add the javascript code for fetching the products, at the end of the page copy and paste the following block of code: < script > // Parsing the url paramaters and data and store them in global variable \"params\" var params = window . location . search . substr ( 1 ). split ( '&' ). reduce ( function ( q , query ) { var chunks = query . split ( '=' ) var key = chunks [ 0 ] var value = chunks [ 1 ] return ( q [ key ] = value , q ) }, {}) // Storing product recommendations in another global variable var product_handles = ( params [ 'products' ] || \"\" ). split ( ',' ) // Calling Shopify api to retrieve the products data Promise . all ( product_handles . map ( function ( product ) { return new Promise ( function ( resolve , reject ) { fetch ( '/products/' + product + '.json' ) . then ( function ( result ) { // Making sure that the product actually exists if ( result . status !== 404 ) { return result . json () } else { return { product : null } } }) . then ( function ( data ) { resolve ( data . product ) }) . catch ( reject ) }) })) . then ( function ( products ) { // Filtering out the products list if it had any removed products products = products . filter ( function ( product ) { return !! product }) // The product grid template var product_template = function ( product , index ) { return ` <div class=\"product\" itemprop=\"itemListElement\" itemscope itemtype=\"http://schema.org/Product\"> <a href=\"/products/ ${ product . handle } \" itemprop=\"url\"> ${ product . images . length ? ` <div class=\"product_image\"> <img src=\" ${ product . images [ 0 ]. src } \" alt=\" ${ product . title } \" /> </div>` : \"\" } <div class=\"info\"> <span class=\"title\" itemprop=\"name\"> ${ product . title } </span> <span class=\"price\" itemprop=\"offers\" itemscope itemtype=\"http://schema.org/Offer\"> <meta itemprop=\"price\" content=\" ${ product . variants [ 0 ]. price } \" /> <meta itemprop=\"priceCurrency\" content=\"USD\" /> <link itemprop=\"availability\" href=\"http://schema.org/InStock\"> <span class=\"money\">$ ${ product . variants [ 0 ]. price } </span> </span> </div> </a> </div>` } // Fill the resulted products grid in the #products element document . getElementById ( \"products\" ). innerHTML = products . map ( product_template ). join ( '' ) }) < /script> At the end we would need some styling for the page, we have that covered through some basic styling you can edit yourself, copy the following block at the end of the page: <!-- { % style % } # products { display : flex ; flex-wrap : wrap ; flex-direction : row ; align-items : flex-end ; justify-content : center ; } . product { width : 24 % ; margin : 1 % ; display : flex ; position : relative ; align-items : center ; flex-direction : column ; justify-content : center ; } . product a { text-decoration : none ; } . product . info { text-align : center ; } { % endstyle % } ``` -- > 10 . Now it 's time to create the page, in Shopify Dashboard sidebar, press on **Pages** ![](../images/recommendations/step-10.png) 11. In pages press on **Add Page** ![](../images/recommendations/step-11.png) 12. Enter your desired page name and you don' t have to fill any content 13 . On the right in ** Online Store ** section you would fine the template select bar , select the recommendations template ![](../ images / recommendations / step-13 . png ) 14 . Save your page and copy its url ## Sync the recommendations page with your quiz 1 . In Visual Quiz Builder app , open your quiz ![](../ images / recommendations / step-15 . png ) 2 . In the dashboard , scroll down until you find ** Result page ** section and press on it ![](../ images / recommendations / step-16 . png ) 3 . In the right sidebar enable toggle button to enable custom recommendation page and find ** Custom Recommendations URL ** field and paste your page url in it . ![](../ images / recommendations / step-17-A . png ) 4 . Make sure you have tagged options in order for the recommendations page to work and save your quiz by pressing on ** Save & Publish ** ![](../ images / recommendations / step-18 . png ) ## Use user provided name in the page ( Optional ) If you are asking the user about their information like name or email then these data will be passed along sind recommendations to the recommendations page If you would like to use any of the user info you have to follow these steps : 1 . Add the following block of code in any desired area in your where you want to use the user name . ``` html < p > Hi < span id = \"user-name\" ></ span >, Here are your recommendations .</ p > Add the following block of code to the already existing javascript code. document . getElementById ( \"user-name\" ). innerHTML = params [ \"user_name\" ]","title":"Creating Shopify Page Template"},{"location":"personalize/custom_recommendations/#use-user-provided-email-in-the-page-optional","text":"Just like we're doing in the user name we can do the same thing with email, in different usually you would need to send the email in the third-party tool of your choosing. You can access the email simply by using the following line: params [ \"user_email\" ]","title":"Use user provided email in the page (Optional)"},{"location":"personalize/klaviyo/","text":"Setting up Klaviyo Events and Emails \u00b6 Note: Klaviyo events and emails are only available on the Personalize Plan and higher By default once you sign up for the Personalize Plan you will recieve Klaviyo events. This does require an initial setting up on our end but once configured you should reviece events. Viewing Events \u00b6 After you have been set up and at least one quiz has been taken quiz events should show up in the Visual Quiz by AskWhai metric in the Analytics section. Clicking into the metric will allow you to view analytics about the event as well as take various actions: Event types \u00b6 By navigating to Best People you should see a list of user profiles. After selecting one it should bring you to the user's profile with a list of all the events they've triggered. Currently we log 3 types of events: Start, Answer, and Complete. Below we have an example of how each should look: Start \u00b6 Answer \u00b6 Complete \u00b6 Sending Emails \u00b6 Note: Feel free to ask us about the flow setup as we can quickly set a basic flow on our end if requested To send emails after a user completes a quiz we need to create a new flow. You can do this by navigating to Flows > Create Flow. This will bring you to a screen with flow templates, we're going to ignore most of those and click on \"Create from Scratch\" instead: From here you can set a name (\"Quiz Takers - AskWhai\" is what we're using for this example): And click on \"Create Flow\". Flow Setup \u00b6 This will bring you to the empty flow that you just made: On the left panel click on \"Metric\" and then from the \"Flow Trigger\" Dropdown select \"Visual Quiz by AskWhai\": Next click on \"Trigger Filters\" and \"Add a Trigger Filter\". This will bring you to the trigger setup: For the \"Dimension\" dropdown select \"event\" and in the \"Dimension Value\" input select \"Complete\", it should look something like this: After this click on \"Save\" and then \"Done\". Creating the Email \u00b6 Once that is complete drag and drop the \"Email\" action into the flow: You can then select the email action and click \"Configure Content\": This will bring you to a screen where you can configure the Sender name, Sender email address, Subject, and Preview text: We sugguest that you have a template prepared to use for the recommendation email, if not you can create one or use one of Klaviyo's pre-built templates. Setting Up the Product Recommendations \u00b6 The last step is to add a text block where you want the recommendations to generate, click the \"Source\" Button, and add this code snippet: <table border= \"0\" cellpadding= \"0\" cellspacing= \"0\" role= \"presentation\" style= \"min-width: 100px; max-width: 600px;\" > <tbody> <tr> {% for item in event | lookup :'value' %} <th bgcolor= \"#ffffff\" class= \"product\" style= \"font-size:0pt; line-height:0pt; padding:0; padding-bottom: 20px; margin:0; font-weight:normal; display: inline-block; width: 48%; float: left; vertical-align:top;\" width= \" {{ item.width }} %;\" > <table border= \"0\" cellpadding= \"0\" cellspacing= \"0\" width= \"100%\" > <tbody> <tr> <td style= \"font-size:0pt; line-height:0pt; text-align:center; padding-bottom:20px;\" ><img border= \"0\" src= \" {{ item.image }} \" style= \"max-width:100%;\" /></td> </tr> <tr> <td style= \"color:#000000; font-family:'Raleway', Arial, sans-serif; font-size:20px; line-height:24px; text-align:center; padding-bottom:15px;\" > {{ item.title }} </td> </tr> <tr> <td align= \"center\" > <table border= \"0\" cellpadding= \"0\" cellspacing= \"0\" style= \"text-align:center; background-color:#000000;border-radius:5px;border-collapse:separate;\" > <tbody> <tr> <td style= \"font-family:'Raleway', Arial, sans-serif; font-size:14px; line-height:18px; text-align:center; padding:10px; background:transparent;\" ><a href= \" {{ item.url }} \" style= \"color:#fff; text-decoration:none;\" target= \"_blank\" > Buy Now </a></td> </tr> </tbody> </table> </td> </tr> </tbody> </table> </th> {% endfor %} </tr> </tbody> </table> Save the template and you should be all set up and good to go! Just make sure you set the flow to \"Live\" so it takes effect!","title":"Setting up Klaviyo Events and Emails"},{"location":"personalize/klaviyo/#setting-up-klaviyo-events-and-emails","text":"Note: Klaviyo events and emails are only available on the Personalize Plan and higher By default once you sign up for the Personalize Plan you will recieve Klaviyo events. This does require an initial setting up on our end but once configured you should reviece events.","title":"Setting up Klaviyo Events and Emails"},{"location":"personalize/klaviyo/#viewing-events","text":"After you have been set up and at least one quiz has been taken quiz events should show up in the Visual Quiz by AskWhai metric in the Analytics section. Clicking into the metric will allow you to view analytics about the event as well as take various actions:","title":"Viewing Events"},{"location":"personalize/klaviyo/#event-types","text":"By navigating to Best People you should see a list of user profiles. After selecting one it should bring you to the user's profile with a list of all the events they've triggered. Currently we log 3 types of events: Start, Answer, and Complete. Below we have an example of how each should look:","title":"Event types"},{"location":"personalize/klaviyo/#start","text":"","title":"Start"},{"location":"personalize/klaviyo/#answer","text":"","title":"Answer"},{"location":"personalize/klaviyo/#complete","text":"","title":"Complete"},{"location":"personalize/klaviyo/#sending-emails","text":"Note: Feel free to ask us about the flow setup as we can quickly set a basic flow on our end if requested To send emails after a user completes a quiz we need to create a new flow. You can do this by navigating to Flows > Create Flow. This will bring you to a screen with flow templates, we're going to ignore most of those and click on \"Create from Scratch\" instead: From here you can set a name (\"Quiz Takers - AskWhai\" is what we're using for this example): And click on \"Create Flow\".","title":"Sending Emails"},{"location":"personalize/klaviyo/#flow-setup","text":"This will bring you to the empty flow that you just made: On the left panel click on \"Metric\" and then from the \"Flow Trigger\" Dropdown select \"Visual Quiz by AskWhai\": Next click on \"Trigger Filters\" and \"Add a Trigger Filter\". This will bring you to the trigger setup: For the \"Dimension\" dropdown select \"event\" and in the \"Dimension Value\" input select \"Complete\", it should look something like this: After this click on \"Save\" and then \"Done\".","title":"Flow Setup"},{"location":"personalize/klaviyo/#creating-the-email","text":"Once that is complete drag and drop the \"Email\" action into the flow: You can then select the email action and click \"Configure Content\": This will bring you to a screen where you can configure the Sender name, Sender email address, Subject, and Preview text: We sugguest that you have a template prepared to use for the recommendation email, if not you can create one or use one of Klaviyo's pre-built templates.","title":"Creating the Email"},{"location":"personalize/klaviyo/#setting-up-the-product-recommendations","text":"The last step is to add a text block where you want the recommendations to generate, click the \"Source\" Button, and add this code snippet: <table border= \"0\" cellpadding= \"0\" cellspacing= \"0\" role= \"presentation\" style= \"min-width: 100px; max-width: 600px;\" > <tbody> <tr> {% for item in event | lookup :'value' %} <th bgcolor= \"#ffffff\" class= \"product\" style= \"font-size:0pt; line-height:0pt; padding:0; padding-bottom: 20px; margin:0; font-weight:normal; display: inline-block; width: 48%; float: left; vertical-align:top;\" width= \" {{ item.width }} %;\" > <table border= \"0\" cellpadding= \"0\" cellspacing= \"0\" width= \"100%\" > <tbody> <tr> <td style= \"font-size:0pt; line-height:0pt; text-align:center; padding-bottom:20px;\" ><img border= \"0\" src= \" {{ item.image }} \" style= \"max-width:100%;\" /></td> </tr> <tr> <td style= \"color:#000000; font-family:'Raleway', Arial, sans-serif; font-size:20px; line-height:24px; text-align:center; padding-bottom:15px;\" > {{ item.title }} </td> </tr> <tr> <td align= \"center\" > <table border= \"0\" cellpadding= \"0\" cellspacing= \"0\" style= \"text-align:center; background-color:#000000;border-radius:5px;border-collapse:separate;\" > <tbody> <tr> <td style= \"font-family:'Raleway', Arial, sans-serif; font-size:14px; line-height:18px; text-align:center; padding:10px; background:transparent;\" ><a href= \" {{ item.url }} \" style= \"color:#fff; text-decoration:none;\" target= \"_blank\" > Buy Now </a></td> </tr> </tbody> </table> </td> </tr> </tbody> </table> </th> {% endfor %} </tr> </tbody> </table> Save the template and you should be all set up and good to go! Just make sure you set the flow to \"Live\" so it takes effect!","title":"Setting Up the Product Recommendations"},{"location":"personalize/recommendations/","text":"Setting up Custom Recommendations page with Shopify \u00b6 The process starts with creating a page template in Shopify Theme editor then creating a page with that template. The template code would have a javascript code that's responsible for processing the data from the quiz, that data includes recommended products and would contain user information (Email, Name) if available. Creating Shopify Page Template \u00b6 To access the editor page you need to follow these steps: Access your store dashboard From the dashboard sidebar click on Online Store In live theme section press on Actions > Edit Code From the Editor sidebar and under Templates section, press on Add a new template From the creation modal chose the template type as Page and enter any name you like for the template and press on Create Template The liquid code like any html code is consisted of three parts: (HTML, CSS, JS), we're gonna add them one by one Add the parent element that will contain the products, the most easy way is by looking in the page for a line that reads {{ page.content }} and paste this block of code beneath it: < div id = \"products\" ></ div > The code should look something like this: Now we would need to add the javascript code for fetching the products, at the end of the page copy and paste the following block of code: < script > // Parsing the url paramaters and data and store them in global variable \"params\" var params = window . location . search . substr ( 1 ). split ( '&' ). reduce ( function ( q , query ) { var chunks = query . split ( '=' ) var key = chunks [ 0 ] var value = chunks [ 1 ] return ( q [ key ] = value , q ) }, {}) // Storing product recommendations in another global variable var product_handles = ( params [ 'products' ] || \"\" ). split ( ',' ) // Calling Shopify api to retrieve the products data Promise . all ( product_handles . map ( function ( product ) { return new Promise ( function ( resolve , reject ) { fetch ( '/products/' + product + '.json' ) . then ( function ( result ) { // Making sure that the product actually exists if ( result . status !== 404 ) { return result . json () } else { return { product : null } } }) . then ( function ( data ) { resolve ( data . product ) }) . catch ( reject ) }) })) . then ( function ( products ) { // Filtering out the products list if it had any removed products products = products . filter ( function ( product ) { return !! product }) // The product grid template var product_template = function ( product , index ) { return ` <div class=\"product\" itemprop=\"itemListElement\" itemscope itemtype=\"http://schema.org/Product\"> <a href=\"/products/ ${ product . handle } \" itemprop=\"url\"> ${ product . images . length ? ` <div class=\"product_image\"> <img src=\" ${ product . images [ 0 ]. src } \" alt=\" ${ product . title } \" /> </div>` : \"\" } <div class=\"info\"> <span class=\"title\" itemprop=\"name\"> ${ product . title } </span> <span class=\"price\" itemprop=\"offers\" itemscope itemtype=\"http://schema.org/Offer\"> <meta itemprop=\"price\" content=\" ${ product . variants [ 0 ]. price } \" /> <meta itemprop=\"priceCurrency\" content=\"USD\" /> <link itemprop=\"availability\" href=\"http://schema.org/InStock\"> <span class=\"money\">$ ${ product . variants [ 0 ]. price } </span> </span> </div> </a> </div>` } // Fill the resulted products grid in the #products element document . getElementById ( \"products\" ). innerHTML = products . map ( product_template ). join ( '' ) }) < /script> At the end we would need some styling for the page, we have that covered through some basic styling you can edit yourself, copy the following block at the end of the page: { % style % } # products { display : flex ; flex-wrap : wrap ; flex-direction : row ; align-items : flex-end ; justify-content : center ; } . product { width : 24 % ; margin : 1 % ; display : flex ; position : relative ; align-items : center ; flex-direction : column ; justify-content : center ; } . product a { text-decoration : none ; } . product . info { text-align : center ; } { % endstyle % } Now it's time to create the page, in Shopify Dashboard sidebar, press on Pages In pages press on Add Page Enter your desired page name and you don't have to fill any content On the right in Online Store section you would fine the template select bar, select the recommendations template Save your page and copy its url Sync the recommendations page with your quiz \u00b6 In Visual Quiz Builder app, open your quiz In the dashboard, scroll down until you find Result page section and press on it In the right sidebar find Custom Recommendations URL field and paste your page url in it Make sure you have tagged options in order for the recommendations page to work and save your quiz by pressing on Save & Publish Use user provided name in the page (Optional) \u00b6 If you are asking the user about their information like name or email then these data will be passed along sind recommendations to the recommendations page If you would like to use any of the user info you have to follow these steps: Add the following block of code in any desired area in your where you want to use the user name. < p > Hi < span id = \"user-name\" ></ span > , Here are your recommendations. </ p > Add the following block of code to the already existing javascript code. document . getElementById ( \"user-name\" ). innerHTML = params [ \"user_name\" ] Use user provided email in the page (Optional) \u00b6 Just like we're doing in the user name we can do the same thing with email, in different usually you would need to send the email in the third-party tool of your choosing. You can access the email simply by using the following line: params [ \"user_email\" ]","title":"Setting up Custom Recommendations page with Shopify"},{"location":"personalize/recommendations/#setting-up-custom-recommendations-page-with-shopify","text":"The process starts with creating a page template in Shopify Theme editor then creating a page with that template. The template code would have a javascript code that's responsible for processing the data from the quiz, that data includes recommended products and would contain user information (Email, Name) if available.","title":"Setting up Custom Recommendations page with Shopify"},{"location":"personalize/recommendations/#creating-shopify-page-template","text":"To access the editor page you need to follow these steps: Access your store dashboard From the dashboard sidebar click on Online Store In live theme section press on Actions > Edit Code From the Editor sidebar and under Templates section, press on Add a new template From the creation modal chose the template type as Page and enter any name you like for the template and press on Create Template The liquid code like any html code is consisted of three parts: (HTML, CSS, JS), we're gonna add them one by one Add the parent element that will contain the products, the most easy way is by looking in the page for a line that reads {{ page.content }} and paste this block of code beneath it: < div id = \"products\" ></ div > The code should look something like this: Now we would need to add the javascript code for fetching the products, at the end of the page copy and paste the following block of code: < script > // Parsing the url paramaters and data and store them in global variable \"params\" var params = window . location . search . substr ( 1 ). split ( '&' ). reduce ( function ( q , query ) { var chunks = query . split ( '=' ) var key = chunks [ 0 ] var value = chunks [ 1 ] return ( q [ key ] = value , q ) }, {}) // Storing product recommendations in another global variable var product_handles = ( params [ 'products' ] || \"\" ). split ( ',' ) // Calling Shopify api to retrieve the products data Promise . all ( product_handles . map ( function ( product ) { return new Promise ( function ( resolve , reject ) { fetch ( '/products/' + product + '.json' ) . then ( function ( result ) { // Making sure that the product actually exists if ( result . status !== 404 ) { return result . json () } else { return { product : null } } }) . then ( function ( data ) { resolve ( data . product ) }) . catch ( reject ) }) })) . then ( function ( products ) { // Filtering out the products list if it had any removed products products = products . filter ( function ( product ) { return !! product }) // The product grid template var product_template = function ( product , index ) { return ` <div class=\"product\" itemprop=\"itemListElement\" itemscope itemtype=\"http://schema.org/Product\"> <a href=\"/products/ ${ product . handle } \" itemprop=\"url\"> ${ product . images . length ? ` <div class=\"product_image\"> <img src=\" ${ product . images [ 0 ]. src } \" alt=\" ${ product . title } \" /> </div>` : \"\" } <div class=\"info\"> <span class=\"title\" itemprop=\"name\"> ${ product . title } </span> <span class=\"price\" itemprop=\"offers\" itemscope itemtype=\"http://schema.org/Offer\"> <meta itemprop=\"price\" content=\" ${ product . variants [ 0 ]. price } \" /> <meta itemprop=\"priceCurrency\" content=\"USD\" /> <link itemprop=\"availability\" href=\"http://schema.org/InStock\"> <span class=\"money\">$ ${ product . variants [ 0 ]. price } </span> </span> </div> </a> </div>` } // Fill the resulted products grid in the #products element document . getElementById ( \"products\" ). innerHTML = products . map ( product_template ). join ( '' ) }) < /script> At the end we would need some styling for the page, we have that covered through some basic styling you can edit yourself, copy the following block at the end of the page: { % style % } # products { display : flex ; flex-wrap : wrap ; flex-direction : row ; align-items : flex-end ; justify-content : center ; } . product { width : 24 % ; margin : 1 % ; display : flex ; position : relative ; align-items : center ; flex-direction : column ; justify-content : center ; } . product a { text-decoration : none ; } . product . info { text-align : center ; } { % endstyle % } Now it's time to create the page, in Shopify Dashboard sidebar, press on Pages In pages press on Add Page Enter your desired page name and you don't have to fill any content On the right in Online Store section you would fine the template select bar, select the recommendations template Save your page and copy its url","title":"Creating Shopify Page Template"},{"location":"personalize/recommendations/#sync-the-recommendations-page-with-your-quiz","text":"In Visual Quiz Builder app, open your quiz In the dashboard, scroll down until you find Result page section and press on it In the right sidebar find Custom Recommendations URL field and paste your page url in it Make sure you have tagged options in order for the recommendations page to work and save your quiz by pressing on Save & Publish","title":"Sync the recommendations page with your quiz"},{"location":"personalize/recommendations/#use-user-provided-name-in-the-page-optional","text":"If you are asking the user about their information like name or email then these data will be passed along sind recommendations to the recommendations page If you would like to use any of the user info you have to follow these steps: Add the following block of code in any desired area in your where you want to use the user name. < p > Hi < span id = \"user-name\" ></ span > , Here are your recommendations. </ p > Add the following block of code to the already existing javascript code. document . getElementById ( \"user-name\" ). innerHTML = params [ \"user_name\" ]","title":"Use user provided name in the page (Optional)"},{"location":"personalize/recommendations/#use-user-provided-email-in-the-page-optional","text":"Just like we're doing in the user name we can do the same thing with email, in different usually you would need to send the email in the third-party tool of your choosing. You can access the email simply by using the following line: params [ \"user_email\" ]","title":"Use user provided email in the page (Optional)"}]}